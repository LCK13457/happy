<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elderly Diet Management for Three Highs Prevention</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .container {
            background-color: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .search-section {
            margin-bottom: 30px;
            padding: 20px;
            background-color: #e8f4f8;
            border-radius: 8px;
        }
        .result-section {
            display: none;
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
        }
        .warning {
            background-color: #fde8e8;
            border-left: 4px solid #e74c3c;
        }
        .safe {
            background-color: #e8f8e8;
            border-left: 4px solid #2ecc71;
        }
        input, select, button {
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #3498db;
            color: white;
            cursor: pointer;
            border: none;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #3498db;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .nutrient-info {
            margin-top: 30px;
        }
        .nutrient-card {
            display: inline-block;
            width: 30%;
            margin: 1%;
            padding: 15px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            vertical-align: top;
        }
        .nutrient-card h3 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 8px;
        }
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        .food-description {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 15px;
            color: #2c3e50;
        }
        @media (max-width: 768px) {
            .nutrient-card {
                width: 100%;
                margin: 10px 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Elderly Diet Management for Three Highs Prevention</h1>
        
        <div class="search-section">
            <h2>Check Food Nutrition Information</h2>
            <p>Enter a food item to check its nutritional content and suitability for elderly with three highs conditions.</p>
            
            <div>
                <input type="text" id="foodInput" placeholder="Enter food name (e.g., Hummus, commercial)" style="width: 70%;">
                <button onclick="checkFood()">Check Nutrition</button>
            </div>
            
            <div id="loading" class="loading">
                <p>Loading food data...</p>
            </div>
        </div>
        
        <div id="resultSection" class="result-section"></div>
    </div>

    <script>
        // Global variable to hold the food database
        let foodDatabase = {};
        
        // Load the JSON file when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            fetch('FoodData_Central_foundation_food_json_2025-04-24.json')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Process the data into a more accessible format
                    if (data.FoundationFoods && Array.isArray(data.FoundationFoods)) {
                        data.FoundationFoods.forEach(food => {
                            const key = food.description.toLowerCase();
                            foodDatabase[key] = food;
                        });
                    }
                    console.log('Food database loaded successfully');
                })
                .catch(error => {
                    console.error('Error loading food database:', error);
                    alert('Error loading food data. Please try again later.');
                });
        });

        function checkFood() {
            const foodInput = document.getElementById('foodInput').value.toLowerCase();
            const resultSection = document.getElementById('resultSection');
            const loading = document.getElementById('loading');
            
            if (!foodInput) {
                alert("Please enter a food name");
                return;
            }
            
            loading.style.display = "block";
            resultSection.style.display = "none";
            
            // Check if database is loaded
            if (Object.keys(foodDatabase).length === 0) {
                setTimeout(() => {
                    loading.style.display = "none";
                    resultSection.innerHTML = `
                        <div class="warning">
                            <p>Food database is still loading. Please try again in a moment.</p>
                        </div>
                    `;
                    resultSection.style.display = "block";
                }, 1000);
                return;
            }
            
            // Simulate database search delay
            setTimeout(() => {
                loading.style.display = "none";
                
                const foundFood = findFoodInDatabase(foodInput);
                
                if (foundFood) {
                    displayFoodInfo(foundFood, resultSection);
                } else {
                    resultSection.innerHTML = `
                        <div class="warning">
                            <p>Food not found in our database. Please try another item or consult with a nutritionist.</p>
                            <p>Some available foods in our database: Hummus, Tomatoes, Beans, Frankfurter, Almonds.</p>
                        </div>
                    `;
                    resultSection.style.display = "block";
                }
            }, 500);
        }

        function findFoodInDatabase(foodInput) {
            // First try exact match
            if (foodDatabase[foodInput]) {
                return foodDatabase[foodInput];
            }
            
            // If no exact match, try partial matches
            for (const key in foodDatabase) {
                if (key.includes(foodInput) || foodInput.includes(key)) {
                    return foodDatabase[key];
                }
            }
            
            return null;
        }

        function displayFoodInfo(food, resultSection) {
            // Extract key nutrients
            const keyNutrients = {
                "Energy (kcal)": findNutrient(food, "Energy", "kcal"),
                "Protein": findNutrient(food, "Protein"),
                "Total Fat": findNutrient(food, "Total lipid (fat)"),
                "Saturated Fat": findNutrient(food, "Fatty acids, total saturated"),
                "Carbohydrates": findNutrient(food, "Carbohydrate, by difference"),
                "Fiber": findNutrient(food, "Fiber, total dietary"),
                "Sugars": findNutrient(food, "Sugars, Total"),
                "Sodium": findNutrient(food, "Sodium, Na"),
                "Potassium": findNutrient(food, "Potassium, K"),
                "Calcium": findNutrient(food, "Calcium, Ca"),
                "Iron": findNutrient(food, "Iron, Fe")
            };
            
            // Create HTML for the results
            let resultHTML = `
                <div class="food-description">${food.description}</div>
                <table>
                    <tr>
                        <th>Nutrient</th>
                        <th>Amount</th>
                        <th>Concern Level</th>
                    </tr>
            `;
            
            // Add rows for each nutrient
            for (const [name, nutrient] of Object.entries(keyNutrients)) {
                if (nutrient) {
                    const concern = assessConcernLevel(name, nutrient.amount, nutrient.unitName);
                    resultHTML += `
                        <tr>
                            <td>${name}</td>
                            <td>${nutrient.amount} ${nutrient.unitName}</td>
                            <td>${concern.level} <span style="color: ${concern.color}">${concern.symbol}</span></td>
                        </tr>
                    `;
                }
            }
            
            resultHTML += `</table>`;
            
            // Add overall recommendation
            const overallConcern = getOverallConcern(keyNutrients);
            resultHTML += `
                <div class="${overallConcern.class}" style="margin-top: 20px; padding: 15px;">
                    <strong>Recommendation:</strong> ${overallConcern.message}
                </div>
            `;
            
            resultSection.innerHTML = resultHTML;
            resultSection.style.display = "block";
        }

        function findNutrient(food, nutrientName, unitName = null) {
            if (!food.foodNutrients || !Array.isArray(food.foodNutrients)) return null;
            
            for (const nutrient of food.foodNutrients) {
                if (nutrient.nutrient && nutrient.nutrient.name === nutrientName) {
                    if (!unitName || (unitName && nutrient.nutrient.unitName === unitName)) {
                        return {
                            amount: nutrient.amount,
                            unitName: nutrient.nutrient.unitName,
                            name: nutrientName
                        };
                    }
                }
            }
            return null;
        }

        function assessConcernLevel(nutrientName, amount, unit) {
            // Define thresholds for different nutrients
            const thresholds = {
                "Saturated Fat": { high: 5, unit: "g" }, // grams
                "Sodium": { high: 500, unit: "mg" }, // milligrams
                "Sugars": { high: 10, unit: "g" }, // grams
                "Energy (kcal)": { high: 300, unit: "kcal" } // calories per serving
            };
            
            // Default to low concern
            let level = "Low";
            let color = "#2ecc71";
            let symbol = "✓";
            
            // Check if this nutrient has defined thresholds
            if (thresholds[nutrientName]) {
                // Convert units if necessary (simple conversion for demo)
                let compareAmount = amount;
                if (unit === "g" && thresholds[nutrientName].unit === "mg") {
                    compareAmount = amount * 1000;
                } else if (unit === "mg" && thresholds[nutrientName].unit === "g") {
                    compareAmount = amount / 1000;
                }
                
                if (compareAmount > thresholds[nutrientName].high) {
                    level = "High";
                    color = "#e74c3c";
                    symbol = "⚠";
                } else if (compareAmount > thresholds[nutrientName].high * 0.5) {
                    level = "Medium";
                    color = "#f39c12";
                    symbol = "~";
                }
            }
            
            return { level, color, symbol };
        }

        function getOverallConcern(nutrients) {
            // Count high concern nutrients
            let highCount = 0;
            
            if (nutrients["Saturated Fat"] && nutrients["Saturated Fat"].amount > 5) highCount++;
            if (nutrients["Sodium"] && nutrients["Sodium"].amount > 500) highCount++;
            if (nutrients["Sugars"] && nutrients["Sugars"].amount > 10) highCount++;
            if (nutrients["Energy (kcal)"] && nutrients["Energy (kcal)"].amount > 300) highCount++;
            
            if (highCount >= 2) {
                return {
                    class: "warning",
                    message: "This food has multiple high-risk nutrients for three highs conditions. Consume in moderation or avoid."
                };
            } else if (highCount === 1) {
                return {
                    class: "warning",
                    message: "This food has one high-risk nutrient. Consume in moderation and balance with other healthy foods."
                };
            } else {
                return {
                    class: "safe",
                    message: "This food appears to be generally safe for three highs conditions. Still consume as part of a balanced diet."
                };
            }
        }
    </script>
</body>
</html>
